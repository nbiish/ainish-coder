---
alwaysApply: true
---
# Coding Constitution

1. Find the facts.
Facts: Here, we are looking for the most basic building blocks in a programming decision or argument. These building blocks, or facts, provide the environment or context in which the coding issue is to be resolved. Certain events occurred, certain actions were or were not taken, and particular components behaved or failed to behave in specific ways. All of these and many more possibilities together make up the intricate setting for the playing out of the issue in question. We always wonder, "What happened in this code?" A major feature of this guide is called "But What If." This feature highlights the importance of facts in programming reasoning by focusing attention on the huge effect of changes in single facts on success or failure in a coding dispute.

2. Look for the issue.
Issue: In almost any programming conflict, finding and expressing the issue is an important step in forming our reaction. The issue is the question that caused the developers and their teams to enter the code review or debugging process. Usually, there are several reasonable perspectives concerning the correct way to word the issue in dispute. Don't let the possibility of multiple useful ways to word the issue cause you any confusion. The coding issue is certainly not just anything that we say it is.

3. Identify the code judge's reasons and conclusion.
Reasons and conclusion: Code judges do not form technical conclusions on the basis of whim. They have support for their decisions. That support consists of their reasons. When we ask someone why a code judge formed a particular conclusion, we are showing our respect for reasons as the proper basis for any assertion. We want a world rich with opinions so that we can have a broad field of choice. But we should agree with only those technical opinions that have convincing reasons supporting the conclusion. Asking "Why?" is our way of saying, "I want to believe you, but you have an obligation to help me by sharing the reasons for your conclusion."

4. Locate in the decision the rules of code or standards that govern the code judge's reasoning.
Rules of code: Code judges cannot offer just any reasoning that they please. They must always look back over their shoulders at the language specifications, coding standards, and previous solutions that together provide an anchor for current and future decisions. What makes programming reasoning so complex is that documentation and best practices are never crystal clear. They may seem very clear, but programmers and engineers have room for interpretive flexibility in their reasoning.

5. Apply critical thinking to the reasoning.
Evaluation of the reasoning: A code judge's reasoning, once it has been laid before us by following the steps discussed here, is a message that we may either accept or reject. One of the most exciting things about our field is its potential for change. Critical thinking in the programming context consists of examining the technical opinion in search of potential problems in the reasoning.

Here is a small sample of some especially useful critical-thinking guidelines for engineers and code reviewers to apply when thinking about programming:
• Look for potential ambiguity in the reasoning. The term ambiguity refers to a lack of clarity in a word or phrase in the reasoning. Many words have multiple meanings; until the intended meaning is discovered, we cannot tell whether we want to agree or disagree with the reasoning.
• Ask whether the analogies used in the decision are strong. When code judges follow particular patterns or precedents, they are saying that the key similarities between the facts in the precedent and those in the code at hand are so similar that it makes sense to apply the same rule or solution in both. Are there key differences in the technical situations that raise questions about the quality of that analogy?
• Check the quality of the code judge's use of evidence in his or her reasoning. Is the evidence used by the code judge to support the opinion both abundant enough and reliable enough that we should agree with the reasoning?
• Think about the extent to which important missing information prevents you from being totally confident about the code judge's reasoning. Is there important missing information that you would need to have before making up your mind?
• Consider the possibility of rival causes. When the code judge claims that one action caused another, think about whether some alternative cause may have been responsible.
