---
globs: PRD.md,*PRD.md,PRD*.md
alwaysApply: false
---
# PRODUCT REQUIREMENTS DOCUMENT: ainish-coder

**Author:** ᓂᐲᔥ ᐙᐸᓂᒥᑮ-ᑭᓇᐙᐸᑭᓯ (Nbiish Waabanimikii-Kinawaabakizi) | **Date:** September 2, 2025 | **Version:** 2.0

## 1. OBJECTIVE

**Purpose:** ainish-coder is a comprehensive configuration manager for AI coding assistants that provides seamless setup and integration for multiple AI development tools in projects. It solves the problem of fragmented AI tool configuration by providing a unified system for deploying structured configurations across different AI coding environments.

## 2. SCOPE

**In-Scope Features:**

- **Triple Deployment System**: Core AINISH configurations, Markdown format deployment, and VSCode/Copilot structured distribution
- **Structured VSCode Distribution**: Separate modern-prompting.instructions.md and anishinaabe-cyberpunk-style.instructions.md files, plus consolidated copilot-instructions.md
- **Unified Configuration Management**: Single script deployment across multiple AI coding environments
- **Anishinaabe-Cyberpunk Styling**: Cultural integration with modern technical aesthetics
- **Comprehensive Security Framework**: Built-in cybersecurity and prompt injection defense
- **Flexible File Formats**: Support for both .mdc and .md file formats

**Out-of-Scope:**

- GUI-based configuration interfaces
- Real-time configuration synchronization
- Cloud-based configuration storage
- Integration with proprietary AI tools beyond GitHub Copilot, Cursor AI, and VSCode

## 3. USER EXPERIENCE

**User Flow:** 
1. **Installation**: Clone repository and run `./ainish-setup.sh` for automatic setup
2. **Core Deployment**: Use `ainish-coder` to deploy essential configurations to current directory
3. **Markdown Deployment**: Use `ainish-coder --markdown` for .md format compatibility
4. **VSCode Deployment**: Use `ainish-coder --vscode` for structured distribution with separate instruction files
5. **Verification**: Confirm files are deployed correctly in target directories

## 4. STRUCTURE -> 'camel' workflow -> QAMMML (Quanta Atoms Molecule Matter Matter-Phase Lifeform)

**Quanta:** Individual configuration files (.mdc/.md), shell functions, and deployment scripts

**Atoms:** Configuration modules (security.mdc, modern-prompting.mdc, etc.), deployment functions, wrapper commands

**Molecules:** Deployment systems (core, markdown, vscode), configuration bundles, installation workflows

**Matter:** ainish-setup.sh script, ainish-coder wrapper functions, structured distribution system

**Matter Phases:** Installation phase, deployment phase, verification phase, update phase

**Lifeforms:** Complete ainish-coder system providing unified AI coding assistant configuration management

## 5. FUNCTIONAL REQUIREMENTS

### Core Features

- **Triple Deployment System:** Core configurations, Markdown format, VSCode structured distribution
- **Structured VSCode Distribution:** Separate modern-prompting.instructions.md, anishinaabe-cyberpunk-style.instructions.md, consolidated copilot-instructions.md
- **Unified Configuration Management:** Single script deployment across multiple AI coding environments
- **Anishinaabe-Cyberpunk Styling:** Cultural integration with modern technical aesthetics
- **Comprehensive Security Framework:** Built-in cybersecurity and prompt injection defense
- **Flexible File Formats:** Support for both .mdc and .md file formats

## 6. NON-FUNCTIONAL REQUIREMENTS

**Performance:** Deployment completes within 5 seconds, supports projects with 1000+ files, 99.9% reliability
**Usability:** Command-line interface with clear feedback, cross-platform compatibility, intuitive wrapper functions
**Security:** Built-in prompt injection defense, secure file handling, no external dependencies for core functionality
**Compatibility:** macOS, Linux, Windows (PowerShell/Command Prompt/WSL), Git, zsh/bash/fish shells

## 7. ASSUMPTIONS & CONSTRAINTS

**Assumptions:**

- Users have basic command-line familiarity
- Target projects use Git for version control
- AI coding assistants support instruction file formats (.md/.mdc)
- Users want structured, professional AI coding configurations

**Constraints:**

- Technology: Bash/shell scripting, Git, cross-platform compatibility requirements
- File System: Requires write permissions to target directories
- Dependencies: Minimal external dependencies (Git only for core functionality)

## 8. SUCCESS METRICS

**Key Performance Indicators:**

- **Deployment Success Rate**: 99.9% successful deployments across all supported platforms
- **User Adoption**: 1000+ active users within 6 months of release
- **Configuration Accuracy**: 100% accurate file distribution with proper structure
- **Cross-Platform Compatibility**: 100% functionality across macOS, Linux, and Windows

## 9. Knowledge Base

**Knowledge Base:**

- **Configuration Files**: All .mdc files in repository root serve as the knowledge base
- **Documentation**: README.md, CONTRIBUTING.md, and inline code documentation
- **Structured Distribution**: ainish-vscode/ directory contains pre-structured configurations
- **Cultural Context**: anishinaabe-cyberpunk-style.mdc provides cultural and styling guidelines

## 10. ACCEPTANCE CRITERIA

**Core Functionality:**

- [x] Triple deployment system works correctly (core, markdown, vscode)
- [x] Structured VSCode distribution creates proper file hierarchy
- [x] Separate modern-prompting.instructions.md and anishinaabe-cyberpunk-style.instructions.md files
- [x] Consolidated copilot-instructions.md contains all other .mdc files
- [x] Cross-platform compatibility across macOS, Linux, and Windows
- [x] Wrapper functions work correctly after installation

**Quality Standards:**

- [x] Performance meets stated targets (deployment completes within 5 seconds)
- [x] Security requirements satisfied (prompt injection defense, secure file handling)
- [x] Accessibility standards met (clear command-line interface, comprehensive documentation)

## 11. OPEN QUESTIONS

- [ ] Integration with additional AI coding assistants beyond GitHub Copilot, Cursor AI, and VSCode
- [ ] GUI-based configuration interface for non-technical users
- [ ] Real-time configuration synchronization across multiple projects
- [ ] Cloud-based configuration storage and sharing capabilities

---

## PRD BEST PRACTICES CHECKLIST

- [ ] Use clear, unambiguous language
- [ ] Include specific, measurable requirements
- [ ] Define success criteria objectively
- [ ] Balance detail with conciseness
- [ ] Treat PRD and Knowledge Base as living documents
- [ ] Reference PRD and Knowledge Base throughout development lifecycle

---
*This PRD template is designed for universal application across any project type. Customize sections as needed while maintaining clarity.*
