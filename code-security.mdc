---
alwaysApply: true
---
# General Cybersecurity Framework & Secure Coding Practices

## MANDATORY SECURITY OPERATING CONTRACT

### Core Security Principles

1. **Default-deny for agency**: Treat all inputs as untrusted and all effectual actions as high risk until justified and risk-accepted under security gates
2. **Secrets & PII hygiene**: Never request, store, echo, or log secrets/PII. Use placeholders and environment references; scrub/redact sensitive data in outputs
3. **Data minimization & classification**: Collect only what is necessary; classify data sensitivity and apply least-privilege handling
4. **Compliance awareness**: Infer and honor applicable regulatory constraints (GDPR, HIPAA, NYDFS). Ask for jurisdiction when uncertain
5. **Auditability**: Include brief audit notes for security-relevant decisions (what/why/when), without sensitive content
6. **Safety checks for commands**: Prefer dry-runs, require explicit confirmation for destructive operations, propose backups/rollbacks
7. **Network egress least-privilege**: Access only minimum hosts over TLS 1.3+, validating certificates. Prefer offline/local data when viable
8. **Supply chain integrity**: Prefer pinned versions, verified signatures, reproducible builds; disallow unverified third-party scripts

## SECURE DEVELOPMENT LIFECYCLE (SDLC)

### Security-First Development Practices

#### 1. ASSUME INSECURE BY DEFAULT

- All code is insecure until proven otherwise
- Security is never automatic - it must be explicitly requested
- "Security by omission" is the primary threat vector in development

#### 2. EXPLICIT SECURITY REQUIREMENTS

- Never implement functionality without security constraints
- Always include threat model context in requirements
- Specify OWASP Top 10 protections explicitly when relevant

### Threat Modeling Integration

#### STRIDE Methodology

- **Spoofing**: Identity verification and authentication
- **Tampering**: Data integrity protection
- **Repudiation**: Audit trails and logging
- **Information Disclosure**: Data protection and encryption
- **Denial of Service**: Resource management and rate limiting
- **Elevation of Privilege**: Authorization and access control

#### Threat Modeling Prompts

- "Identify potential attack vectors for [COMPONENT]"
- "Generate threat model for [SYSTEM] considering STRIDE methodology"
- "List security controls needed for [DATA_FLOW]"

#### Vulnerability Assessment

- "Review this code for security vulnerabilities focusing on [OWASP_CATEGORY]"
- "Generate security test cases for [FUNCTION]"
- "Identify potential timing attacks in [AUTHENTICATION_CODE]"

#### Multi-Stage Security Validation

1. Generate initial implementation
2. "Review the codebase for security vulnerabilities"
3. "Implement fixes for identified security issues"
4. "Generate security test cases for the final code"

## ENCRYPTION & DATA PROTECTION

### Encryption at Rest

- Always specify encryption requirements for stored data
- Define key management strategy (AWS KMS, HSM, etc.)
- Include compliance requirements (NYDFS, GDPR, etc.)

### Encryption in Transit

- Mandate TLS 1.3 minimum for all external communications
- Specify certificate management and validation
- Include mutual TLS (mTLS) for service-to-service communication

### Client-Side Encryption

- Pre-encrypt sensitive data before transmission to cloud services
- Use envelope encryption for performance
- Implement field-level encryption for PII/PHI

## CRYPTOGRAPHY POLICY

### Approved Algorithms

**Symmetric:** AES-256-GCM or AES-256-GCM-SIV for nonce misuse resistance
**Asymmetric:** ECDSA P-384 or RSA-4096; Ed25519 permitted when not bound by FIPS
**Hashing:** SHA-256/384 families; use HKDF for key derivation; HMAC-SHA-256 for MAC
**Passwords:** Argon2id (preferred) or scrypt; PBKDF2/bcrypt for compliance constraints  

### Prohibited Algorithms

- Custom cryptographic implementations
- Deprecated algorithms (MD5, SHA-1, DES, RC4)
- Hardcoded cryptographic keys
- Predictable initialization vectors

### Key Management

- Use KMS/HSM where possible
- Never hardcode keys
- Enforce rotation and separation of duties
- Short TTL (≤ 90 days) with automated rotation

## COMMAND EXECUTION GUARDRAILS

### Safety Protocols

- Always propose dry-run first with backup/rollback plan
- For destructive operations, require `CONFIRM_DESTRUCTIVE=YES`
- Display summary diff before execution
- Limit scope via explicit allowlists and path prefixes
- Avoid wildcards in destructive operations

### Shell Execution Best Practices

```bash
set -euo pipefail; IFS=$'\n\t'  # Fail fast
# Use explicit paths; avoid globbing for destructive operations
# Require confirmation tokens for rm/chmod/chown/mv on non-temp paths
# Append non-interactive flags only when risk-assessed
# Background long-running tasks with logging and resource limits
```

### Audit Requirements

- Capture execution logs with sensitive redaction
- Record brief audit note covering commands, inputs, and safeguards
- Include scope, authorization, and monitoring details

## COMPLIANCE & DATA GOVERNANCE

### Audit Trail Requirements

- Generate auditability notes: who/what/when/why for sensitive actions
- Include policy timestamp and relevant citations
- Log decisions to refuse or downgrade risky requests
- Maintain immutable audit logs with sensitive redaction

## SECURITY-FIRST PROJECT DELIVERY

### Secure-by-Default Scaffolding

- Create `SECURITY.md`, `THREATMODEL.md`, `ARCHITECTURE.md` within KNOWLEDGE_BASE/security/
- Pin dependencies; enable dependency audit and license checks
- Generate SBOM (Software Bill of Materials)
- Provide `.env.example` only (never real secrets)
- Configure CI: formatting/linting, SAST, secret scanning, dependency/CVE audit

### Container & Infrastructure Security

- Base image provenance and vulnerability scanning
- Non-root user execution with minimal capabilities
- Infrastructure as Code (IaC) static analysis
- TLS 1.3, mTLS where applicable
- Rate limiting, input validation, output encoding

### Definition of Done - Security Acceptance

- ✅ No Critical/High CVEs in dependency scan
- ✅ CI security jobs green; secrets scan clean
- ✅ Threat model updated; high-risk findings mitigated
- ✅ Security code review completed
- ✅ Red-team check completed

### Quality Assurance

- Integrate SAST/DAST tools (Snyk, SonarQube, GitGuardian)
- Implement secret scanning in CI/CD
- Require security code review for all generated code
- Maintain security debt tracking and remediation

## OWASP TOP 10 WEB APPLICATION SECURITY RISKS

### A01:2021 – Broken Access Control

- Implement proper authentication and authorization
- Use principle of least privilege
- Validate access controls on every request

### A02:2021 – Cryptographic Failures

- Use strong encryption algorithms
- Implement proper key management
- Protect sensitive data in transit and at rest

### A03:2021 – Injection

- Use parameterized queries
- Implement input validation and sanitization
- Use output encoding

### A04:2021 – Insecure Design

- Implement threat modeling
- Use secure design patterns
- Apply security controls by design

### A05:2021 – Security Misconfiguration

- Use secure defaults
- Implement proper configuration management
- Regular security configuration reviews

### A06:2021 – Vulnerable and Outdated Components

- Maintain inventory of components
- Regular security updates
- Vulnerability scanning

### A07:2021 – Identification and Authentication Failures

- Implement strong authentication
- Use multi-factor authentication
- Protect against credential stuffing

### A08:2021 – Software and Data Integrity Failures

- Implement code signing
- Use secure update mechanisms
- Verify data integrity

### A09:2021 – Security Logging and Monitoring Failures

- Implement comprehensive logging
- Monitor for security events
- Regular log analysis

### A10:2021 – Server-Side Request Forgery (SSRF)

- Validate and sanitize URLs
- Use allowlists for external requests
- Implement network segmentation

## SECURITY GATES

High-risk actions require explicit human authorization with phrase:

```text
SECURITY OVERRIDE: <scope> <reason>
```

### High-Risk Actions Include

- Data deletion or schema migrations
- Production environment changes
- Key operations or credential management
- System configuration modifications

### Required Documentation

- Risk level assessment
- Rollback steps and procedures
- Monitoring plan
- Approval justification

## 2024/2025 CYBERSECURITY UPDATES

### Emerging Threats

- **AI-Enhanced Attacks**: Sophisticated phishing and social engineering
- **Supply Chain Attacks**: Increased focus on third-party dependencies
- **Zero Trust Architecture**: Enhanced network security models
- **Cloud Security**: Improved cloud-native security practices

### Best Practices Evolution

- **DevSecOps Integration**: Security integrated throughout development lifecycle
- **Automated Security Testing**: Continuous security validation
- **Threat Intelligence**: Proactive threat detection and response
- **Compliance Automation**: Automated compliance monitoring and reporting

---

**Critical Reminder:** Speed without security is just fast failure. Secure development practices must be integrated throughout the entire development lifecycle.
