#!/bin/bash
# Script to configure AI tools for a project
# Usage: mai-coder [aider|code|cursor] [project_path]
# If no tool is specified, all tools will be configured

# Get the installation directory
INSTALL_DIR="${HOME}/.mai-coder"
SHARED_LIB="${INSTALL_DIR}/lib/shared_functions.sh"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Define the get_project_dir function directly in this script
get_project_dir() {
    local target="$1"
    local project_path=""
    
    # If no argument provided, use current directory
    if [ -z "$target" ]; then
        echo "$(pwd)"
        return 0
    fi
    
    # Convert to absolute path if relative
    if [[ ! "$target" = /* ]]; then
        target="$(pwd)/$target"
    fi
    
    # Check if this is a valid directory or file
    if [ -d "$target" ]; then
        echo "$target"
        return 0
    elif [ -f "$target" ]; then
        echo "$(dirname "$target")"
        return 0
    else
        echo "Error: Not a valid directory or file: $target" >&2
        return 1
    fi
}

# Function to set up or update configurations for Aider
setup_aider_config() {
    local project_path="$1"
    
    echo -e "${GREEN}Setting up Aider configurations...${NC}"
    
    # Copy .aider.conf.yml if it exists
    if [ -f "$INSTALL_DIR/mai-aider/.aider.conf.yml" ]; then
        safe_copy_file "$INSTALL_DIR/mai-aider/.aider.conf.yml" "$project_path/.aider.conf.yml"
    fi
    
    # Copy .aiderignore if it exists
    if [ -f "$INSTALL_DIR/mai-aider/.aiderignore" ]; then
        safe_copy_file "$INSTALL_DIR/mai-aider/.aiderignore" "$project_path/.aiderignore"
    fi
    
    # Copy .env.example if it exists
    if [ -f "$INSTALL_DIR/mai-aider/.env.example" ]; then
        safe_copy_file "$INSTALL_DIR/mai-aider/.env.example" "$project_path/.env.example"
    fi
    
    # Copy .aider-instructions.md if it exists
    if [ -f "$INSTALL_DIR/mai-aider/.aider-instructions.md" ]; then
        safe_copy_file "$INSTALL_DIR/mai-aider/.aider-instructions.md" "$project_path/.aider-instructions.md"
    fi
    
    # Also ensure .aider directory exists and copy any files inside it
    local aider_dir_path="$INSTALL_DIR/mai-aider/.aider"
    if [ -d "$aider_dir_path" ]; then
        mkdir -p "$project_path/.aider"
        for file in "$aider_dir_path"/*; do
            if [ -f "$file" ]; then
                base_name=$(basename "$file")
                dest_file="$project_path/.aider/$base_name"
                safe_copy_file "$file" "$dest_file"
            fi
        done
    fi
    
    echo -e "${GREEN}Aider configuration completed.${NC}"
}

# Function to set up or update configurations for GitHub Copilot
setup_copilot_config() {
    local project_path="$1"
    local github_dir_path="$INSTALL_DIR/mai-copilot/github-copilot"
    
    # Ensure the GitHub directory exists in the project
    mkdir -p "$project_path/.github"
    
    echo -e "${GREEN}Setting up GitHub Copilot configurations...${NC}"
    
    # Copy the Copilot instructions file to the project
    if [ -f "$github_dir_path/.github/copilot-instructions.md" ]; then
        safe_copy_file "$github_dir_path/.github/copilot-instructions.md" "$project_path/.github/copilot-instructions.md"
    fi
    
    # Copy the .copilotignore file if it exists
    if [ -f "$INSTALL_DIR/mai-copilot/.copilotignore" ]; then
        safe_copy_file "$INSTALL_DIR/mai-copilot/.copilotignore" "$project_path/.copilotignore"
    fi
    
    echo -e "${GREEN}GitHub Copilot configuration completed.${NC}"
}

# Function to set up or update configurations for Cursor
setup_cursor_config() {
    local project_path="$1"
    local cursor_dir_path="$INSTALL_DIR/mai-cursor"
    
    echo -e "${GREEN}Setting up Cursor configurations...${NC}"
    
    # Copy the Cursor configuration files
    if [ -f "$cursor_dir_path/.cursorignore" ]; then
        safe_copy_file "$cursor_dir_path/.cursorignore" "$project_path/.cursorignore"
    fi
    
    if [ -f "$cursor_dir_path/.cursorindexingignore" ]; then
        safe_copy_file "$cursor_dir_path/.cursorindexingignore" "$project_path/.cursorindexingignore"
    fi
    
    if [ -f "$cursor_dir_path/.cursorrules" ]; then
        safe_copy_file "$cursor_dir_path/.cursorrules" "$project_path/.cursorrules"
    fi
    
    echo -e "${GREEN}Cursor configuration completed.${NC}"
}

# Function to safely copy a file with backup if it exists
safe_copy_file() {
    local source_file="$1"
    local dest_file="$2"
    
    # Check if source file exists
    if [ ! -f "$source_file" ]; then
        echo "Source file does not exist: $source_file"
        return 1
    fi
    
    # Check if destination file already exists
    if [ -f "$dest_file" ]; then
        if [ "$AUTO_BACKUP_MODE" = "true" ]; then
            # Automatically backup and replace without prompting
            local timestamp=$(date +"%Y%m%d%H%M%S")
            local backup_file="${dest_file}.backup_${timestamp}"
            cp "$dest_file" "$backup_file"
            echo "Backed up to: $backup_file"
            cp "$source_file" "$dest_file"
            echo "Updated: $dest_file"
            return 0
        fi
        
        # Prompt user for choice
        echo "File already exists: $dest_file"
        echo "Would you like to:"
        echo "1) Keep existing file"
        echo "2) Backup existing file and replace with template"
        read -p "Enter your choice (1/2): " choice
        
        if [ "$choice" == "2" ]; then
            local timestamp=$(date +"%Y%m%d%H%M%S")
            local backup_file="${dest_file}.backup_${timestamp}"
            cp "$dest_file" "$backup_file"
            echo "Backed up to: $backup_file"
            cp "$source_file" "$dest_file"
            echo "Updated: $dest_file"
        else
            echo "Keeping existing file: $dest_file"
        fi
    else
        # If file doesn't exist, just copy it
        cp "$source_file" "$dest_file"
        echo "Created: $dest_file"
    fi
    
    return 0
}

# Function to set up all AI tool configurations
setup_all_ai_configs() {
    local project_path="$1"
    
    echo -e "${GREEN}Setting up AI configurations for all tools...${NC}"
    setup_aider_config "$project_path"
    setup_copilot_config "$project_path"
    setup_cursor_config "$project_path"
    echo -e "${GREEN}All AI tool configurations updated.${NC}"
}

# Function to display usage information
show_usage() {
    echo "Usage: mai-coder [tool] [project_path]"
    echo "  tool: Optional. One of 'aider', 'code', or 'cursor'. If not specified, all tools will be configured."
    echo "  project_path: Optional. Path to the project directory. If not specified, the current directory will be used."
    echo ""
    echo "Examples:"
    echo "  mai-coder                  # Configure all tools for the current directory"
    echo "  mai-coder aider            # Configure only Aider for the current directory"
    echo "  mai-coder code ~/myproject # Configure only GitHub Copilot for ~/myproject"
    echo "  mai-coder cursor .         # Configure only Cursor for the current directory"
    echo ""
    echo "Alternative commands:"
    echo "  mai-coder-aider [path]     # Configure only Aider"
    echo "  mai-coder-code [path]      # Configure only GitHub Copilot"
    echo "  mai-coder-cursor [path]    # Configure only Cursor"
}

# Main logic
echo -e "${BLUE}=== MAI-CODER CONFIGURATION ===${NC}"

# Parse arguments
TOOL=""
PROJECT_PATH_ARG=""

# First check for help flag, regardless of how script was called
if [ $# -gt 0 ] && { [ "$1" = "-h" ] || [ "$1" = "--help" ]; }; then
    show_usage
    exit 0
fi

# Check if script was called via a symlink
SCRIPT_NAME=$(basename "$0")
if [ "$SCRIPT_NAME" = "mai-coder-aider" ]; then
    TOOL="aider"
elif [ "$SCRIPT_NAME" = "mai-coder-code" ]; then
    TOOL="code"
elif [ "$SCRIPT_NAME" = "mai-coder-cursor" ]; then
    TOOL="cursor"
fi

# If not called via symlink, check if first argument is a tool name
if [ -z "$TOOL" ] && [ $# -gt 0 ]; then
    case "$1" in
        aider|code|cursor)
            TOOL="$1"
            shift
            ;;
    esac
fi

# Get project path from remaining argument
if [ $# -gt 0 ]; then
    PROJECT_PATH_ARG="$1"
fi

# Get the project directory (defaulting to current directory if none specified)
project_path=$(get_project_dir "$PROJECT_PATH_ARG")
if [ $? -ne 0 ]; then
    echo "Error: Could not determine project directory."
    exit 1
fi

echo "Project directory: $project_path"

# Set the configuration message based on the tool
if [ -z "$TOOL" ]; then
    CONFIG_MSG="all AI tools"
elif [ "$TOOL" = "aider" ]; then
    CONFIG_MSG="Aider"
elif [ "$TOOL" = "code" ]; then
    CONFIG_MSG="GitHub Copilot"
elif [ "$TOOL" = "cursor" ]; then
    CONFIG_MSG="Cursor"
fi

echo "Configuring $CONFIG_MSG for project: $project_path"

# Ask if user wants to proceed
echo "Would you like to update $CONFIG_MSG configurations for this project?"
echo "1) No, exit without updating"
echo "2) Yes, update configurations"
echo "3) Yes, backup and replace all configs without prompting"
read -p "Enter your choice (1/2/3): " choice

case "$choice" in
    1)
        echo "Exiting without updating configurations."
        exit 0
        ;;
    2)
        # Configure based on the tool specified
        if [ -z "$TOOL" ]; then
            setup_all_ai_configs "$project_path"
        elif [ "$TOOL" = "aider" ]; then
            setup_aider_config "$project_path"
        elif [ "$TOOL" = "code" ]; then
            setup_copilot_config "$project_path"
        elif [ "$TOOL" = "cursor" ]; then
            setup_cursor_config "$project_path"
        fi
        ;;
    3)
        echo "Setting up configurations (auto-backup mode)..."
        export AUTO_BACKUP_MODE=true
        
        # Configure based on the tool specified
        if [ -z "$TOOL" ]; then
            setup_all_ai_configs "$project_path"
        elif [ "$TOOL" = "aider" ]; then
            setup_aider_config "$project_path"
        elif [ "$TOOL" = "code" ]; then
            setup_copilot_config "$project_path"
        elif [ "$TOOL" = "cursor" ]; then
            setup_cursor_config "$project_path"
        fi
        
        export AUTO_BACKUP_MODE=false
        ;;
    *)
        echo "Invalid choice. Exiting without updating."
        exit 1
        ;;
esac

echo -e "${GREEN}Configuration completed successfully.${NC}"
exit 0 